#!/bin/bash

# get rmsk annotation for genome build from UCSC
function get_rmsk() {

  # assign global variables
  GENOME=$1
  CACHE=~/.cache/annotations

  #  downlaod rmsk file if needed
  URL="https://hgdownload.cse.ucsc.edu/goldenPath/${GENOME}/database/rmsk.txt.gz"
  RMSK="${GENOME}_rmsk.txt"
 
  # create cache directory and code
  mkdir -p $CACHE
  mkdir -p ~/code/bin

  if [ ! -f ${CACHE}/${RMSK} ]; then
      echo "Downloading $RMSK from $URL"
      curl -s $URL > ${CACHE}/${RMSK}.gz && gunzip ${CACHE}/${RMSK}.gz
  fi
  
  #  download makeTEgtf.pl if needed
  URL="http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/makeTEgtf.pl.gz"
  makeGTF=~/code/bin/makeTEgtf.pl

  if [ ! -f $makeGTF ]; then
    echo "Downloading $makeGTF from $URL"
    curl -s $URL > ${makeGTF}.gz && gunzip ${makeGTF}.gz
  fi
  
  # Make into GTF file
  GTF="${GENOME}_rmsk.gtf"
  if [ ! -f ${CACHE}/${GTF} ]; then
      echo "making $GTF from $RMSK"
      perl $makeGTF -c 6 -s 7 -e 8 -o 10 -n ${GENOME}_rmsk -t 11 -C 12 -f 13 -S 2 ${CACHE}/${RMSK} > ${CACHE}/${GTF}
  fi

  # Make symlinks
  
  echo "Linking ${CACHE}/${RMSK} to $RMSK"
  ln -fs ${CACHE}/${RMSK} $RMSK
  echo "Linking ${CACHE}/${GTF} to $GTF"
  ln -fs ${CACHE}/${GTF} $GTF 

}

# get sra files from SRR_Acc_List.txt
function get_sra () {

  ACC_FILE=$1
  THREADS=$2

  # activate conda environment
  if ! command -v 'prefetch' &>/dev/null && \
    command -v 'conda' && \
    [ "$CONDA_DEFAULT_ENV" != "get-data" ] && \
    conda info --envs | grep "$CONDA_PREFIX_1/envs/get-data" $>/dev/null; then
      printf "\n\e[0;35m Attempting to switch to get-data environment \e[0m\n\n"
      eval "$(conda shell.bash hook)"
      conda activate get-data
  fi

  # create output directory
  mkdir -p raw_fastq && cd raw_fastq

  # setup numeric variables
  COUNTER=0
  TOTAL=$(wc -l ../$ACC_FILE | awk '{print $1}')

  while read -r ACC;
  do
    # increase counter
    let COUNTER=COUNTER+1 

    # check for existance of file
    if ls ${ACC}*.fastq.gz 1> /dev/null 2>&1;
    then 
       printf "\n\e[0;35mSkipping $ACC since the $(ls ${ACC}*.fastq.gz) exists... \e[0m"
    else
            # print in purple
      printf "\n\e[0;35mDownloading and unpacking $ACC ... [$COUNTER/$TOTAL] \e[0m"

      # use command group to store exit code  
      { prefetch -p $ACC && vdb-validate $ACC && fasterq-dump $ACC --split-files -f -e $THREADS -p && gzip $ACC*fastq && rm -rf $ACC; }

      if [ $? -eq 0 ]
      then
        # print message in green
        printf "\e[0;32m[✔] $ACC downloading and unpacking succeeded [$COUNTER/$TOTAL] \e[0m\n"
      else
        # print message in red
        printf "\e[0;31m[✖] $ACC downloading and unpacking failed \e[0m\n"
        echo "$ACC" >> ../failed_acc.txt
      fi
    fi
  done < ../$ACC_FILE

}


# separate uniquely mapping and multimapping reads from a bam file
function filter_multi () {

  # activate conda environment
  if ! command -v 'bamtools' &>/dev/null && \
    command -v 'conda' && \
    [ "$CONDA_DEFAULT_ENV" != "shell" ] && \
    conda info --envs | grep "$CONDA_PREFIX/envs/shell" $>/dev/null; then
      printf "\n\e[0;35m Attempting to switch to shell environment \e[0m\n\n"
      eval "$(conda shell.bash hook)"
      conda activate shell
  fi
  
  arr="$1"
  for BAM_FILE in "${arr[@]}";
    do
      name=${BAM_FILE%".bam"}
      
      # wait for memory
      MEM=$(expr $(du -b $BAM_FILE | awk '{print $1}') / 1000)
      wait_for_mem_available $MEM 600
      
      # create temp files for read storage
      mkdir -p tmp
      SAM_FILE=$(mktemp tmp/XXXX.sam)
      READ_FILE=$(mktemp tmp/XXXX.reads.txt)
      UNIQ_READ_FILE=$(mktemp tmp/XXXX.uniq.txt)
      MULTI_READ_FILE=$(mktemp tmp/XXXX.multi.txt)
      
      printf "\n\e[0;35mProcessing mapped reads from $BAM_FILE ... \e[0m\n\n"
      samtools view $BAM_FILE > $SAM_FILE
      awk '{print $1}' $SAM_FILE | sort | uniq -c | awk '$1>1 {print $2}' > $MULTI_READ_FILE
      
      # save uniquely mapping reads to new file
      samtools view -H $BAM_FILE > ${name}.uniq.sam
      grep -vFf $MULTI_READ_FILE $SAM_FILE >> ${name}.uniq.sam
      samtools view -b ${name}.uniq.sam > ${name}.uniq.bam
      rm -f ${name}.uniq.sam
      printf "\n\e[0;32m[✔] wrote $(expr $(wc -l < $READ_FILE) - $(wc -l < $MULTI_READ_FILE)) reads to ${name}.uniq.bam\e[0m\n\n"
      
      # save multi-mapping reads to new file
      samtools view -H $BAM_FILE > ${name}.multi.sam
      grep -Ff $MULTI_READ_FILE $SAM_FILE >> ${name}.multi.sam
      samtools view -b ${name}.multi.sam > ${name}.multi.bam
      rm -f ${name}.multi.sam
      printf "\n\e[0;32m[✔] wrote $(wc -l $MULTI_READ_FILE) reads to ${name}.multi.bam\e[0m\n\n"
      
      #remove temp files
      printf "\n\e[0;35mRemoving temp files... \e[0m\n\n"
      rm -f $SAM_FILE $MULTI_READ_FILE 
    
      printf "\n\e[0;32m[✔] $BAM_FILE \e[0m\n\n"
      echo "$i"
    done
  
  # TODO
  # - add quality filter?
  
}


export -f get_rmsk
export -f get_sra
export -f filter_multi
