#!/bin/bash

# get rmsk annotation for genome build from UCSC
function get_rmsk() {

  # assign global variables
  GENOME=$1
  CACHE=~/.cache/annotations

  #  downlaod rmsk file if needed
  URL="https://hgdownload.cse.ucsc.edu/goldenPath/${GENOME}/database/rmsk.txt.gz"
  RMSK="${GENOME}_rmsk.txt"
 
  # create cache directory and code
  mkdir -p $CACHE
  mkdir -p ~/code/bin

  if [ ! -f ${CACHE}/${RMSK} ]; then
      echo "Downloading $RMSK from $URL"
      curl -s $URL > ${CACHE}/${RMSK}.gz && gunzip ${CACHE}/${RMSK}.gz
  fi
  
  #  download makeTEgtf.pl if needed
  URL="http://labshare.cshl.edu/shares/mhammelllab/www-data/TEtranscripts/TE_GTF/makeTEgtf.pl.gz"
  makeGTF=~/code/bin/makeTEgtf.pl

  if [ ! -f $makeGTF ]; then
    echo "Downloading $makeGTF from $URL"
    curl -s $URL > ${makeGTF}.gz && gunzip ${makeGTF}.gz
  fi
  
  # Make into GTF file
  GTF="${GENOME}_rmsk.gtf"
  if [ ! -f ${CACHE}/${GTF} ]; then
      echo "making $GTF from $RMSK"
      perl $makeGTF -c 6 -s 7 -e 8 -o 10 -n ${GENOME}_rmsk -t 11 -C 12 -f 13 -S 2 ${CACHE}/${RMSK} > ${CACHE}/${GTF}
  fi

  # Make symlinks
  
  echo "Linking ${CACHE}/${RMSK} to $RMSK"
  ln -fs ${CACHE}/${RMSK} $RMSK
  echo "Linking ${CACHE}/${GTF} to $GTF"
  ln -fs ${CACHE}/${GTF} $GTF 

}

# get sra files from SRR_Acc_List.txt
function get_sra () {

  # activate conda environment
  if ! command -v 'get-data' &>/dev/null && \
    command -v 'conda' && \
    [ "$CONDA_DEFAULT_ENV" != "get-data" ] && \
    conda info --envs | grep "CONDA_ROOT/get-data" $>/dev/null; then
      echo "attempting to switch to get-data environmet"
      eval "$(conda shell.bash hook)"
      conda activate get-data
  fi

  # create output directory
  mkdir -p raw_fastq && cd raw_fastq

  while read -r ACC;
  do
    # use command group to store exit code  
    { prefetch $ACC && vdb-validate $ACC && fasterq-dump --split-files $ACC && gzip $ACC*fastq && rm -r $ACC; }

    if [ $? -eq 0 ]
    then
      # print message in green
      printf "\e[0;32m  [✔] $ACC downloading and unpacking succeeded \e[0m\n"
    else
      # print message in red
      printf "\e[0;31m  [✖] $ACC downloading and unpacking failed \e[0m\n"
      echo "$ACC" >> failed_Acc.txt
    fi

  done < ../$1


}